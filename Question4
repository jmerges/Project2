classdef Network
    properties
        numHiddenLayers
        hiddenInput
        neurons = Neuron
        weight
        outWeight
        outNeuron
        output
    end
    methods
        function obj = Network(input, layers)
            obj.numHiddenLayers = layers;
            obj.hiddenInput = zeros(784,obj.numHiddenLayers);
            obj.weight = (rand(784,784,obj.numHiddenLayers)-.5)/5;
            obj.outWeight = (rand(784,1)-.5)/3;
            obj.neurons (1:784,1:obj.numHiddenLayers) = Neuron;
            obj.outNeuron = Neuron;
            
            normal_inp = double(input)*(.98/255)+.01;
            normal_inp = normal_inp(:);
            for i = 1:784
                obj.hiddenInput(i,1)=sum(normal_inp(:).*obj.weight(:,i,1));
                obj.neurons(i,1)=modifyNeuron(obj.neurons(i,1),obj.hiddenInput(i,1));
            end
            for n = 2:obj.numHiddenLayers
                for j = 1:784
                    total_1=0;
                    for k = 1:784
                        total_1=total_1+obj.neurons(k,n-1).OUT*obj.weight(k,j,n);
                    end
                    obj.hiddenInput(j,n)=total_1;
                    obj.neurons(j,n)=modifyNeuron(obj.neurons(j,n),obj.hiddenInput(j,n));
                end
            end
            total_2 = 0;
            for l = 1:784
                total_2 = total_2+obj.neurons(l,obj.numHiddenLayers).OUT*obj.outWeight(l);
            end
            obj.outNeuron = modifyNeuron(obj.outNeuron,total_2);
            obj.output = obj.outNeuron.OUT;
        end
        function obj = Reverse_Pass(obj,input,target)
            nu=0.1;
            delta = zeros(784,obj.numHiddenLayers);
            error_0 = target-obj.output;
            delta_0 = obj.output*(1-obj.output)*error_0;
            
            normal_inp = double(input)*(.98/255)+.01;
            normal_inp = normal_inp(:);
            
            for i = 1:784
                obj.outWeight(i) = obj.outWeight(i)+(nu*delta_0*obj.neurons(i,obj.numHiddenLayers).OUT);
                delta(i,obj.numHiddenLayers) = obj.neurons(i,obj.numHiddenLayers).OUT*(1-obj.neurons(i,obj.numHiddenLayers).OUT)*delta_0*obj.outWeight(i);
            end
            for l = 1:784
                obj.weight(l,:,obj.numHiddenLayers) = obj.weight(l,:,obj.numHiddenLayers)+nu*(delta(:,obj.numHiddenLayers)')*obj.neurons(l,obj.numHiddenLayers-1).OUT;
            end
            for n = 2:obj.numHiddenLayers
                for j = 1:784
                    delta(j,obj.numHiddenLayers-n+1) = obj.neurons(j,obj.numHiddenLayers-n+1).OUT*(1-obj.neurons(j,obj.numHiddenLayers-n+1).OUT)*obj.weight(j,:,obj.numHiddenLayers-n+2)*delta(:,obj.numHiddenLayers-n+2);
                end
                for m = 1:784
                    if n < obj.numHiddenLayers
                        obj.weight(m,:,obj.numHiddenLayers-n+1) = obj.weight(m,:,obj.numHiddenLayers-n+1)+nu*(delta(:,obj.numHiddenLayers-n+1)')*obj.neurons(m,obj.numHiddenLayers-n).OUT;
                    else
                        obj.weight(m,:,1) = obj.weight(m,:,1)+nu*(delta(:,1)'*normal_inp(m));
                    end
                end
            end
        end
        function obj = Test(obj,input,target)
            normal_inp = double(input)*(.98/255)+.01;
            normal_inp = normal_inp(:);
            
            for i = 1:784
                obj.hiddenInput(i,1)=sum(normal_inp(:).*obj.weight(:,i,1));
                obj.neurons(i,1)=modifyNeuron(obj.neurons(i,1),obj.hiddenInput(i,1));
            end
            for n = 2:obj.numHiddenLayers
                for j = 1:784
                    total_1=0;
                    for k = 1:784
                        total_1=total_1+obj.neurons(k,n-1).OUT*obj.weight(k,j,n);
                    end
                    obj.hiddenInput(j,n)=total_1;
                    obj.neurons(j,n)=modifyNeuron(obj.neurons(j,n),obj.hiddenInput(j,n));
                end
            end
            total_2 = 0;
            for l = 1:784
                total_2 = total_2+obj.neurons(l,obj.numHiddenLayers).OUT*obj.outWeight(l);
            end
            obj.outNeuron = modifyNeuron(obj.outNeuron,total_2);
            obj.output = obj.outNeuron.OUT;
            
            disp('Error equals:');
            disp(abs(target-obj.output));
        end
    end
end
